---
- name: build frontend bundle
  run_once: true
  shell:
    cmd: PATH=/bin:$PATH && NVM_DIR=~/.nvm && . "$NVM_DIR/nvm.sh" && nvm use node && npm run build
    chdir: "{{ source_path }}/frontend"
    executable: /bin/bash
  delegate_to: localhost

- name: create frontend deploy directory
  become: true
  file:
    path: "{{ deploy_path }}/ui/frontend"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: upload frontend
  become: true
  become_user: "{{ deploy_user }}"
  copy:
    src: "{{ source_path }}/frontend/{{ item }}"
    dest: "{{ deploy_path }}/ui/frontend"
  loop:
    - dist
  notify:
    - restart UI service

- name: create backend deploy directory
  become: true
  file:
    path: "{{ deploy_path }}/ui/backend"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: upload backend
  become: true
  become_user: "{{ deploy_user }}"
  copy:
    src: "{{ source_path }}/backend/{{ item }}"
    dest: "{{ deploy_path }}/ui/backend"
  loop:
    - Pipfile
    - Pipfile.lock
    - ptinsight
  notify:
    - restart UI service

- name: create config directory
  become: true
  become_user: "{{ deploy_user }}"
  file:
    path: "{{ deploy_path }}/ui/backend/config"
    state: directory

- name: upload config
  become: true
  become_user: "{{ deploy_user }}"
  template:
    src: ui.yaml.j2
    dest: "{{ deploy_path }}/ui/backend/config/ui.yaml"
  notify:
    - restart UI service

- name: Copy UI service file
  become: true
  template:
    src: ptinsight-ui.service.j2
    dest: /usr/lib/systemd/system/ptinsight-ui.service

- name: reload systemd
  become: true
  systemd:
    daemon_reload: yes

- name: install dependencies
  become: true
  become_user: "{{ deploy_user }}"
  command: 
    cmd: pipenv sync
    chdir: "{{ deploy_path }}/ui/backend"

- meta: flush_handlers

- name: start the UI service
  become: true
  service:
    name: ptinsight-ui
    state: started
    enabled: yes
