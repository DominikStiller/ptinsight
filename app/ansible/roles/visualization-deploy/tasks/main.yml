---
- name: build frontend bundle
  run_once: true
  shell:
    cmd: PATH=/bin:$PATH && NVM_DIR=~/.nvm && . "$NVM_DIR/nvm.sh" && nvm use node && npm install && npm run build
    chdir: "{{ source_path }}/frontend"
    executable: /bin/bash
  delegate_to: localhost

- name: create frontend deploy directory
  become: true
  file:
    path: "{{ deploy_path }}/visualization/frontend"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: upload frontend
  become: true
  become_user: "{{ deploy_user }}"
  copy:
    src: "{{ source_path }}/frontend/{{ item }}"
    dest: "{{ deploy_path }}/visualization/frontend"
  loop:
    - dist
  notify:
    - restart visualization service

- name: build ptinsight-visualization
  run_once: true
  command:
    cmd: poetry build --format=wheel
    chdir: "{{ source_path }}/backend"
  delegate_to: localhost

- name: create backend deploy directory
  become: true
  file:
    path: "{{ deploy_path }}/visualization/backend"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"

- name: upload ptinsight-visualization
  become: true
  become_user: "{{ deploy_user }}"
  copy:
    src: "{{ item }}"
    dest: "{{ deploy_path }}/visualization/backend"
  with_fileglob:
    - "{{ source_path }}/backend/dist/ptinsight_visualization-*.whl"
  register: python_visualization
  notify:
    - restart visualization service

- name: remove virtual environment
  become: true
  become_user: "{{ deploy_user }}"
  file:
    path: "{{ deploy_path }}/visualization/backend/venv"
    state: absent

- name: install packages into new virtual environment
  become: true
  become_user: "{{ deploy_user }}"
  pip: 
    name: "file://{{ item.dest }}"
    virtualenv: "{{ deploy_path }}/visualization/backend/venv"
    virtualenv_command: /usr/local/bin/python3 -m venv
  with_list: "{{ python_common.results + python_visualization.results }}"

- name: create config directory
  become: true
  become_user: "{{ deploy_user }}"
  file:
    path: "{{ deploy_path }}/visualization/backend/config"
    state: directory

- name: upload config
  become: true
  become_user: "{{ deploy_user }}"
  template:
    src: visualization.yaml.j2
    dest: "{{ deploy_path }}/visualization/backend/config/visualization.yaml"
  notify:
    - restart visualization service

- name: upload start script
  become: true
  become_user: "{{ deploy_user }}"
  template:
    src: start.sh.j2
    dest: "{{ deploy_path }}/visualization/backend/start.sh"
    mode: a+x

- name: Copy visualization service file
  become: true
  template:
    src: ptinsight-visualization.service.j2
    dest: /usr/lib/systemd/system/ptinsight-visualization.service

- name: reload systemd
  become: true
  systemd:
    daemon_reload: yes

- meta: flush_handlers

- name: start the visualization service
  become: true
  service:
    name: ptinsight-visualization
    state: started
    enabled: yes
